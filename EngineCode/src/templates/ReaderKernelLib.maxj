/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 8      Example: 3      Name: Two-dimensional average variable
 * MaxFile name: CnnVolume
 * Summary:
 *      Kernel that averages within an 8-point window.
 */

package linebuffer;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
//import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
//import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;

import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;

// Reads in an input stream and does not read more than it is meant to

class ReaderKernel extends KernelLib {
 
  public ReaderKernel(KernelLib owner) {
    super(owner);
  
  }

  void doIt(String inDataName, DFEVar real_len, DFEVar program_len, DFEVar read_en, DFEVar out_en, DFEVar inData) { 

    //DFEVar out_en = dfeBool().newInstance(this);
    inData <== io.input(inDataName, dfeFloat(8, 24),out_en);
    
    SMIO sm = addStateMachine("smRead", new ReadWriteSM(this));
    sm.connectInput("in_en", read_en.cast(dfeBool()));
    sm.connectInput("program_len", program_len.cast(dfeUInt(32)) );
    sm.connectInput("real_len", real_len.cast(dfeUInt(32)) );
    out_en <== sm.getOutput("out_en");  
    
    //DFEVar tick = control.count.simpleCounter(32,1000);
    //debug.simPrintf("%d: read_en=%d,out_en=%d,inData=%f\n",tick,read_en,out_en,inData);
  
  }

}
