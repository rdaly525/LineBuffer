/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 8      Example: 3      Name: Two-dimensional average variable
 * MaxFile name: Top
 * Summary:
 *      Kernel that averages within an 8-point window.
 */

package linebuffer;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
//import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
//import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;

import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;


class TopKernel extends Kernel {
  
  public DFEVar multReduce(int len, float[] kernel, DFEVar[] stencil) {
    DFEVar sum = constant.var(dfeFloat(8, 24), 0);
    for (int i=0; i<len; i++) {
      sum = sum + kernel[i]*stencil[i];
    }
    return sum;
  }

  public TopKernel(KernelParameters parameters, int nxMax, int k, int pad, int stride, float[] kernel) {
    super(parameters);
    
    int kH = k;
    int kW = k;
    int padH = pad;
    int padW = pad;

    DFEVar inH = io.scalarInput("inH", dfeUInt(32));
    DFEVar inW = io.scalarInput("inW", dfeUInt(32));
    DFEVar real_input_len = io.scalarInput("realInLen", dfeUInt(32));
    DFEVar real_output_len = io.scalarInput("realOutLen", dfeUInt(32));
    DFEVar outH = 1+(inH+2*padH-kH)/stride;
    DFEVar outW = 1+(inW+2*padW-kW)/stride;
    DFEVar inLen = inH*inW;
    DFEVar outLen = outH*outW;

    DFEVar us_data = dfeFloat(8,24).newInstance(this);
    DFEVar us_done = dfeBool().newInstance(this);
    DFEVar us_en = dfeBool().newInstance(this);
    DFEVar read_en = dfeBool().newInstance(this);
    DFEVar out_read_en = dfeBool().newInstance(this);
    new ReaderKernel(this).doIt("inData",real_input_len, inLen, read_en, out_read_en, us_data);
    
    read_en <== ~us_done;
    us_en <== constant.var(true);
    
    dfeFloat(8,24).newInstance(this);
    DFEVar ds_done = constant.var(false);
    DFEVar ds_en = dfeBool().newInstance(this);
    
    DFEVar master_en = constant.var(true);
    DFEVar master_done = dfeBool().newInstance(this);

    LineBuffer lb = new LineBuffer(this,nxMax,kH,kW,padH,padW,stride);
    DFEVar[] ds_data = lb.doIt(inH,inW,us_data, us_en, us_done, ds_en, ds_done,master_en,master_done);

 
    DFEVar outData = multReduce(kW*kH, kernel, ds_data);

    DFEVar out_write_en = dfeBool().newInstance(this);
    new WriterKernel(this).doIt("outData",real_output_len, outLen, ds_en, out_write_en, outData);
    
    DFEVar tick = control.count.simpleCounter(32,1000);
    debug.simPrintf("%d: read_en=%d,us_data=%f,ds_en=%d,outData=%f\n",tick,read_en,us_data,ds_en,outData);


    //DFEVar outAddr = io.scalarInput("outAddr", dfeUInt(32));
    //LMemCommandStream.makeKernelOutput("outDataCmd",
    //  constant.var(dfeBool(),1),  // control
    //  outAddr,  // address 
    //  constant.var(dfeUInt(8),1),  //size
    //  constant.var(dfeUInt(7),0),   //inc
    //  constant.var(dfeUInt(4),0),   //stream
    //  constant.var(dfeBool(),0) //intr
    //);

    
    //CounterChain intrCC = control.count.makeCounterChain(outEnReal);
    //DFEVar intrCnt = intrCC.addCounter(1000,1);
    //DFEVar intr_en = (intrCnt > 94);
    
    //LMemCommandStream.makeKernelOutput("intrCmd",
    //  intr_en,  //control
    //  constant.var(dfeUInt(32),0),  // address TODO might be wrong address
    //  constant.var(dfeUInt(8),1),  //size
    //  constant.var(dfeUInt(1),0),   //inc
    //  constant.var(dfeUInt(1),0),   //stream
    //  constant.var(true)  // interrupt
    //);
    //io.output("intrStream", constant.var(dfeUInt(32),5), dfeUInt(32),intr_en);
 
    //for (DFEVar dfeVar : window) {
    //  sum = sum + dfeVar;
    //}
    //io.output("debug", hi.cast(dfeUInt(32)), dfeUInt(32));
  }

}
